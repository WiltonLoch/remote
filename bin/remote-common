#!/bin/bash
NULL_LOCAL_DIRECTORY="__null__"

#performs md5 of string passed in
#uses md5 or md5sum depending on what it finds
do_md5()
{
  which md5 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5
    return
  fi
  which md5sum 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5sum | sed 's/^\(.*\) .*$/\1/'
    return
  fi
}

# Finds the directory in this tree that has remote-ing set up.
get_local_directory()
{
  if [ -f .remote ]
  then
    pwd
  else
    if [ `pwd` = "/" ]
      then 
        echo "Could not find any remote-enabled directory set up in this tree"
        echo "Exiting..."
        exit 1 
    else
      pushd ../ > /dev/null
      get_local_directory
      popd > /dev/null
    fi
  fi
}

# Returns the remote directory where the command needs to be executed
get_remote_command_directory()
{
  local this_dir=`pwd`
  local root_dir=`get_local_directory`
  diff=`echo $this_dir | sed s:$root_dir::`
  echo `get_remote_directory`/$diff
}


# Returns the remote directory that would map to the current local directory
# Only used during remote-init if no remote directory is specified
get_remote_init_directory()
{
  local local_dir=`pwd`
  remote_directory=`do_md5 $local_dir`
  echo .remotes/$remote_directory
}

get_remote_directory()
{
  local_dir=`get_local_directory`
  if [ "x$REMOTE_HOST_INDEX" == "x" ]
  then
  if [ -e $local_dir/.remoteindex ]
  then
    lineNo=`cat $local_dir/.remoteindex`
  else
    lineNo=1
  fi
  else
    lineNo=$REMOTE_HOST_INDEX
  fi
  sed -n "${lineNo}{p;q;}" $local_dir/.remote | cut -d ":" -f 2
}

get_remote_host()
{
  local_dir=`get_local_directory`
  if [ -z $1 ]
  then
          if [ "x$REMOTE_HOST_INDEX" == "x" ]
          then
            if [ -e $local_dir/.remoteindex ]
                  then
                    lineNo=`cat $local_dir/.remoteindex`
                  else
                    lineNo=1
                  fi
          else
            lineNo=$REMOTE_HOST_INDEX
          fi
  else
    lineNo=$1
  fi
  sed -n "${lineNo}{p;q;}" $local_dir/.remote | cut -d ":" -f 1
}
  
get_ignores()
{
  pattern='--exclude=.remote --exclude=.remoteignore '
  if [ -f .remoteignore ]
  then
    awk 'BEGIN {pattern = "--exclude=.remote --exclude=.remoteignore "} {pattern = pattern "--exclude="$1" "} END {print pattern}' .remoteignore
  else
    echo $pattern
  fi
}

ensure_synced()
{
  local OPTIND
  verbosity_flag=""
  dry_run_flag=""
  info_flag=""
  while getopts ":ivnm" opt; do
    case ${opt} in
      i ) info_flag="-i"
          ;;
      v )
          verbosity_flag="-v"
          ;;
      n )
          dry_run_flag="-n"
          ;;
      m )
          mirror_flag="--delete-excluded"
          ;;
    esac
  done

  remote_host=`get_remote_host`
  remote_dir=`get_remote_directory`
  local_dir=`get_local_directory`
  pushd $local_dir > /dev/null
  ignores=`get_ignores`
  if [[ "$verbosity_flag" != "" ]]; then
    start=`date +%s`
    echo "Starting sync..."
  fi
  rsync -achz $info_flag $verbosity_flag $dry_run_flag --copy-unsafe-links -e "ssh -q" --delete --delete-after $mirror_flag --force `get_ignores` ./ $remote_host:$remote_dir || {
        echo "Failed to rsync. Is remote host $remote_host reachable?"
        exit 1
  }
  if [[ "$verbosity_flag" != "" ]]; then
    end=`date +%s`
    runtime=$( echo "$end - $start" | bc -l )
    echo "Sync done in $runtime seconds."
  fi
  popd > /dev/null
}

verify_setup()
{
  #check that local directory for .remote is found
  local_directory=`get_local_directory` || {
    echo "Failed to find a local remote directory. Did you remote-init yet?"
    exit 1
  }
}

# A spinner printer to the console
spin() {
  declare message=$1
  declare pid=$2
  local -a marks=( '/' '-' '\' '|' )
  while kill -0 $pid 2>/dev/null; do
     printf '  %s %s\r' "$message" "${marks[i++ % ${#marks[@]}]}"
     sleep 1
  done
}

verify_connection()
{
  RED="\033[1;31m"
  GREEN="\033[1;32m"
  NOCOLOR="\033[0m"
  declare remote_host="$1"
  declare connection_testing_depth="$2"
  echo "Connection Stats for $remote_host"
  # first test liveness
  ping -c 1 $remote_host 2>/dev/null 1>/dev/null
  if [ $? -eq 0 ]; then
    echo -e "  - Host is ${GREEN}reachable${NOCOLOR}"
    if [[ "$connection_testing_depth" == "deep" ]]; then
      #Test Latency with 5 pings
      ping -c 5 $remote_host 2>.ping.err 1>.ping.out &
      pid=$!
      spin "Collecting latency measurements" $pid
      awk '/transmitted/ || /round-trip/' .ping.out | sed 's/^/  - /'
      rm -f .ping.err .ping.out
      #Test Bandwidth
      test_file=".data.out"
      file_size=10024
      #Create a 512MB file on the remote host
      ssh $remote_host "dd if=/dev/zero of=$test_file bs=1048576 count=512 &>/dev/null"
      scp -v $remote_host:$test_file $test_file 2>&1 | \
        grep "Bytes per second" | \
        sed "s/^[^0-9]*\([0-9.]*\)[^0-9]*\([0-9.]*\).*$/\2/g" > down_speed &
      spin "Checking download speed:" $!
      down_speed=`cat down_speed`
      rm -f down_speed
      down_speed=`bytes_per_sec_to_printable_text $down_speed`
      echo "  - Download speed: $down_speed           "
      #Create a 10MB file on the local host
      dd if=/dev/urandom of=$test_file bs=1048576 count=10 &> /dev/null
      scp -v $test_file $remote_host:$test_file 2>&1 | \
        grep "Bytes per second" | \
        sed "s/^[^0-9]*\([0-9.]*\)[^0-9]*\([0-9.]*\).*$/\1/g" > up_speed &
      spin "Checking upload speed:" $!
      up_speed=`cat up_speed`
      rm -f up_speed
      up_speed=`bytes_per_sec_to_printable_text $up_speed`
      echo "  - Upload speed:   $up_speed             "
      rm -f $test_file
      ssh -q $remote_host "rm -f $test_file"
    fi
  else
    echo -e "  - Host is ${RED}unreachable${NOCOLOR}"
    exit 1
  fi
}

# Converts a bytes per second number to a printable rate (Kbps/Mbps etc)
bytes_per_sec_to_printable_text()
{
  declare input_speed_Bps=$1
  input_speed=$(echo "scale=2; $input_speed_Bps/125" | bc -l)
  speed_units="Kbps"
  if (( $(echo "$input_speed > 1000" | bc -l) )); then
      input_speed=$(echo "scale=2; $input_speed/1000" | bc -l)
      speed_units="Mb/s"
  fi
  echo "$input_speed $speed_units"
}

generate_command()
{
  declare cmd_file_name="$1"
  declare remote_dir="$2"
  declare remote_command_dir="$3"
  shift 3
  rm -f $cmd_file_name
  cat <<EOT >> $cmd_file_name
#delete myself first
rm $cmd_file_name
#source bash profile, ignore errors
source ~/.bash_profile 2>/dev/null 1>/dev/null
#source .remotenv, ignore errors
source ~/$remote_dir/.remoteenv 2>/dev/null 1>/dev/null
#drop into remote dir
cd ~/$remote_command_dir
#execute actual command (escape special characters)
$(printf ' %q' "$@")
EOT
  chmod a+x $cmd_file_name
}

