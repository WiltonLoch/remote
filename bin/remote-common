#!/bin/bash
NULL_LOCAL_DIRECTORY="__null__"

#performs md5 of string passed in
#uses md5 or md5sum depending on what it finds
do_md5()
{
  which md5 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5
    return
  fi
  which md5sum 2>/dev/null 1>/dev/null
  if [ $? == 0 ]
  then
    echo $@ | md5sum | sed 's/^\(.*\) .*$/\1/'
    return
  fi
}

# Finds the directory in this tree that has remote-ing set up.
get_local_directory()
{
  if [ -f .remote ]
  then
    pwd
  else
    if [ `pwd` = "/" ]
      then 
        echo "Could not find any remote-enabled directory set up in this tree"
        echo "Exiting..."
        exit 1 
    else
      pushd ../ > /dev/null
      get_local_directory
      popd > /dev/null
    fi
  fi
}

# Returns the remote directory where the command needs to be executed
get_remote_command_directory()
{
  local this_dir=`pwd`
  local root_dir=`get_local_directory`
  diff=`echo $this_dir | sed s:$root_dir::`
  echo `get_remote_directory`/$diff
}


# Returns the remote directory that would map to the current local directory
# Only used during remote-init if no remote directory is specified
get_remote_init_directory()
{
  local local_dir=`pwd`
  remote_directory=`do_md5 $local_dir`
  echo .remotes/$remote_directory
}

get_remote_directory()
{
  local_dir=`get_local_directory`
  if [ "x$REMOTE_HOST_INDEX" == "x" ]
  then
  if [ -e $local_dir/.remoteindex ]
  then
    lineNo=`cat $local_dir/.remoteindex`
  else
    lineNo=1
  fi
  else
    lineNo=$REMOTE_HOST_INDEX
  fi
  sed -n "${lineNo}{p;q;}" $local_dir/.remote | cut -d ":" -f 2
}

get_remote_host()
{
  local_dir=`get_local_directory`
  if [ -z $1 ]
  then
          if [ "x$REMOTE_HOST_INDEX" == "x" ]
          then
            if [ -e $local_dir/.remoteindex ]
                  then
                    lineNo=`cat $local_dir/.remoteindex`
                  else
                    lineNo=1
                  fi
          else
            lineNo=$REMOTE_HOST_INDEX
          fi
  else
    lineNo=$1
  fi
  sed -n "${lineNo}{p;q;}" $local_dir/.remote | cut -d ":" -f 1
}
  
get_ignores()
{
  pattern='--exclude=.remote --exclude=.remoteignore '
  if [ -f .remoteignore ]
  then
    awk 'BEGIN {pattern = "--exclude=.remote --exclude=.remoteignore "} {pattern = pattern "--exclude="$1" "} END {print pattern}' .remoteignore
  else
    echo $pattern
  fi
}

ensure_synced()
{
  remote_host=`get_remote_host`
  remote_dir=`get_remote_directory`
  local_dir=`get_local_directory`
  pushd $local_dir > /dev/null
  if [ -z "$1" ]
  then
      rsync -az --copy-unsafe-links -e "ssh -q" --delete --delete-after --force `get_ignores` ./ $remote_host:$remote_dir
  else
          if [ -z "$2" ]
          then
            echo "syncing to $remote_host:$remote_dir"
            rsync -avz --copy-unsafe-links -e "ssh -q" --delete --delete-after --delete-excluded --force `get_ignores` ./ $remote_host:$remote_dir
          else
            echo "dry run for syncing to $remote_host:$remote_dir"
            rsync -avvnz --copy-unsafe-links -e "ssh -q" --delete --delete-after --delete-excluded --force `get_ignores` ./ $remote_host:$remote_dir
          fi
  fi
  popd > /dev/null
}
